## Return a numeric vector of correlations
filenames <- list.files(directory, pattern="*.csv", full.names=TRUE)
data <- data.frame(cor = numeric(0))
for (i in 1:length(filenames)) {
cdata <- na.omit(read.csv(filenames[i]))
if (nrow(cdata) > threshold) {
data <- rbind(data, as.numeric(format(cor(cdata$sulfate, cdata$nitrate)), digits = 3))
print(cor(cdata$sulfate, cdata$nitrate))
}
}
data
}
ccr <- corr("specdata", 400)
summary(ccr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
filenames <- list.files(directory, pattern="*.csv", full.names=TRUE)
data <- data.frame(cor = numeric(0))
for (i in 1:length(filenames)) {
cdata <- na.omit(read.csv(filenames[i]))
if (nrow(cdata) > threshold) {
data <- rbind(data, cor(cdata$sulfate, cdata$nitrate))
print(cor(cdata$sulfate, cdata$nitrate))
}
}
data
}
ccr <- corr("specdata", 400)
summary(ccr)
ccr
ccr <- corr("specdata", 5000)
head(ccr)
summary(ccr)
ccr
ccr <- c()
ccr
ccr <- c(ccr, 2)
ccr
ccr <- c(ccr, 2)
ccr
ccr <- c(ccr, 5)
ccr
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
filenames <- list.files(directory, pattern="*.csv", full.names=TRUE)
data <- c()
for (i in 1:length(filenames)) {
cdata <- na.omit(read.csv(filenames[i]))
if (nrow(cdata) > threshold) {
data <- c(data, cor(cdata$sulfate, cdata$nitrate))
print(cor(cdata$sulfate, cdata$nitrate))
}
}
data
}
corr("specdata", 400)
ccr <- corr("specdata", 400)
head(ccr)
summary(ccr)
ccr <- corr("specdata", 5000)
summary(ccr)
length(ccr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
filenames <- list.files(directory, pattern="*.csv", full.names=TRUE)
data <- c()
for (i in 1:length(filenames)) {
cdata <- na.omit(read.csv(filenames[i]))
if (nrow(cdata) > threshold) {
data <- c(data, cor(cdata$sulfate, cdata$nitrate))
##                        print(cor(cdata$sulfate, cdata$nitrate))
}
}
data
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("pollutemean.R")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
f <- function(x) {
g <- function(y) {
y + z
}
x <- 4
x + g(x)
}
z <- 10
f(3)
z <- 0
f(3)
f <- function (x) {}
f <- function (x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z)
my_sqrt <- sqrt(z-1)
my_sqrt
y_div <- z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
play()
ls()
list.files()
nxt()
list.files()
?list.files
args(list.files)
old.dir <- getwd(0)
old.dir <- getwd()
mkdir(testdir)
?getwd
?setwd
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
lists.files()
list.files()
?list.files
list.files("mytest.R")
files.exists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.info("mytest3.R")
file.path("mytest.R")
file.path("mytest3.R")
create.dir("testdir2", "testdir2\testdir3")
dir.create("testdir2", "testdir2\testdir3")
dir.create("testdir2/testdir3", recursive = TRUE)
dir.delete("testdir2")
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5,10,length=30)
length(my_sql)
length(my_seq)
my_sql
my_seq
1:length(my_seq)
seq(along.with = my.seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times-40)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0,5, 55, -10, 5)
num_vect <- c(0,5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Lucas")
my_name
paste(my_char, collapse=" ")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep ="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3,5,7])
c(x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2.-10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norft = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect <- c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vecotr)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6<7
10<=10
5 != 7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints <0)
all(ints>0)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flags_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shap_mat
shape_mat
class(shape_mate)
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?apply
?tapply
table(flags@landmass)
table(flags$landmass)
table(flags@animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = T)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(10)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace-TRUE, c(0.3, 0.7))
sample(c(0,1), 100, replace=TRUE, c(0.3, 0.7))
sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips, 1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips <- rbinom(1, size = 100, prob = 0.7)
flips <- rbinom(size = 1, n = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(size = 1, n = 100, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(mean=100, sd=25)
rnorm(mean=100, sd=25,n=10)
?rpois
rpois(n=5, lambda=10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October, 17, 1986 08:24"
t3 <- "October, 17 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=car$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist)
plot(dist, speed)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance", main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
?numeric
?`<<-`
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
zz <- makeVector()
zz
?list
pts <- list(x = cars[,1], y = cars[,2])
pts
pts <- list(x = cars[,1], y = cars[,2])
pts
plots(pts)
plot(pts)
ggplots(pts)
ggplot2
(pts)
ggplots(pts)
ggplot2(pts)
getwd()
setwd(~/GitHub/ProgrammingAssignment2)
setwd("~/GitHub/ProgrammingAssignment2")
getwd()
ls()
list.files()
